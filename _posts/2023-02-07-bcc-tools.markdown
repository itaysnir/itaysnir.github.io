---
layout: post
title:  "BCC Tools"
date:   2023-02-07 19:59:43 +0300
categories: jekyll update
---

**Contents**
* TOC
{:toc}
## General

eBPF is pretty OP. \
It allows to run sandboxed programs in the kernel, that can be used for cool stuff, such as syscall filtering, tracing, and network filtering (probably the most trivial usage).

Due to its complexity, there are few projects that offer abstraction layers over eBPF - and [BCC][bcc-git] is one of them. 

BCC (BPF Compiler Collection) is a python library that makes it easy to write eBPF code. \
The callback functions should be written in C, and the pythonic API allows easy hooking of these probes to specific kernel events. 

Extra links for reading: [link0][link0] [link1][link1] [link2][link2] [link3][link3], and [linux-performance][linux-performance].

## Installation

Requires some dependencies, such as LLVM with BPF support, Clang, cmake. 

```bash
# For Jammy (22.04)
sudo apt install -y bison build-essential cmake flex git libedit-dev \
libllvm14 llvm-14-dev libclang-14-dev python3 zlib1g-dev libelf-dev libfl-dev python3-distutils

git clone https://github.com/iovisor/bcc
mkdir bcc/build; cd bcc/build
cmake ..
make
sudo make install
cmake -DPYTHON_CMD=python3 .. # build python3 binding
pushd src/python/
make
sudo make install
popd
```

In order to verify the installation, simply run `execsnoop.py` tool. \
This tool traces over new processes that are being `exec`'ed within the system:

```bash
PCOMM            PID     PPID    RET ARGS
ls               7764    2652      0 /usr/bin/ls --color=auto -alF
```

## Tutorial

### Basic Linux Performance Analysis

First, install the `sysstat` package. \
The following commands are very handy for basic analysis:

```bash
uptime
dmesg | tail
vmstat 1
mpstat -P ALL 1
pidstat 1
iostat -xz 1
free -m
sar -n DEV 1
sar -n TCP,ETCP 1
top
```

#### uptime

Quick way to view the average load (number of processes wanting to run on each core). \
Note these values also includes processes blocked in  uninterruptible I/O (such as disk / network). 

```bash
$ uptime
09:37:21 up 2 min,  4 users,  load average: 1.05, 0.82, 0.34
```

The above means a sum average over the last 1, 5 and 15 minutes, of processes waiting to run on each core (the above snapshot was taken shortly after system boot). 

#### dmesg

Shows system messages. 

#### vmstat 1

Basically parses `/proc/vmstat`. \
The `1` argument means to run within 1 second summaries. 

```bash
procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
 1  0  17768  78428  32504 721608    0   12   688    54  173  264  4  7 89  1  0
 0  0  17768  78428  32512 721608    0    0     0    16  183  250  0  0 100  0  0
 0  0  17768  78428  32512 721608    0    0     0     4  134  197  0  0 100  0  0
```

`r` stands for the number of processes running on CPU, waiting to run. Note it *does not include I/O blocked processes*. \
Therefore, `r` value greater than the number of cores, means a saturation. 

`free` means the free memory (KB). 

`si, so` means swap in and swapped out pages. Non-zero values of these, means system runs out of memory. 

`us,sy,id,wa,st` means breakdowns of CPU time, taken as an average across all CPUs. User time, system time, idle, wait I/O time, and stolen time (by other guests). \
These counters may easily confirm if the CPU is busy. 

#### mpstat -P ALL 1

```bash
Linux 5.15.0-58-generic (itay-virtual-machine)  02/10/2023      _x86_64_        (4 CPU)

09:51:53 AM  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle
09:51:54 AM  all    0.00    0.00    0.76    0.00    0.00    0.51    0.00    0.00    0.00   98.74
09:51:54 AM    0    0.00    0.00    1.98    0.00    0.00    1.98    0.00    0.00    0.00   96.04
09:51:54 AM    1    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
09:51:54 AM    2    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00    0.00  100.00
09:51:54 AM    3    0.00    0.00    1.02    0.00    0.00    0.00    0.00    0.00    0.00   98.98
```

Prints CPU time breakdowns per CPU within the system. \
Can be used to check for an imbalance. 

#### pidstat 1

```bash
Average:      UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command
Average:        0        14    0.00    0.49    0.00    0.00    0.49     -  rcu_sched
Average:      108       643    0.00    0.49    0.00    0.00    0.49     -  systemd-oomd
Average:        0       726    0.49    0.00    0.00    0.00    0.49     -  vmtoolsd
Average:     1000      1723    0.49    0.00    0.00    0.00    0.49     -  node
Average:     1000      1845    0.00    0.49    0.00    0.00    0.49     -  node
Average:     1000      2037    0.00    0.49    0.00    0.00    0.49     -  vmtoolsd
Average:     1000      3850    1.97    3.45    0.00    0.00    5.42     -  pidstat
```

Pretty similar to `top`, but doesn't clears the screen. \
Might be nice to see %CPU usage of each process. 

Note that 100% CPU usage means 1 core. \
This means that usage of 1500% CPU, for example, meaning a process takes about 15 cores. 

#### iostat -xz 1

```bash
avg-cpu:  %user   %nice %system %iowait  %steal   %idle
           1.36    0.62    2.40    0.20    0.00   95.42

Device            r/s     rkB/s   rrqm/s  %rrqm r_await rareq-sz     w/s     wkB/s   wrqm/s  %wrqm w_await wareq-sz     d/s     dkB/s   drqm/s  %drqm d_await dareq-sz     f/s f_await  aqu-sz  %util
loop0            0.03      0.26     0.00   0.00    0.84     7.73    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.00
loop1            0.01      0.01     0.00   0.00    0.14     1.21    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.00
loop10           0.03      0.26     0.00   0.00    1.60     8.09    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.01
loop11           0.95     35.58     0.00   0.00    1.05    37.44    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.47
loop12           0.01      0.04     0.00   0.00    0.95     2.70    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.00
loop13           0.02      0.18     0.00   0.00    0.69     8.24    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.01
loop14           0.01      0.01     0.00   0.00    0.00     1.27    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.00
loop2            0.27      3.44     0.00   0.00    1.41    12.62    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.09
loop3            0.04      0.80     0.00   0.00    1.42    20.45    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.01
loop4            0.05      0.83     0.00   0.00    2.16    18.31    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.01
loop5            0.04      0.79     0.00   0.00    2.32    19.12    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.01
loop6            0.81      9.45     0.00   0.00    1.08    11.71    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.14
loop7            0.44      4.64     0.00   0.00    0.60    10.53    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.05
loop8            0.04      0.27     0.00   0.00    1.46     7.54    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.01
loop9            0.03      0.26     0.00   0.00    2.14     8.14    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.01
sda             22.19    890.83     8.49  27.68    1.27    40.14    8.37    428.97    24.23  74.32    1.51    51.24    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.04   3.18
sr0              0.07      1.55     0.00   0.00    0.86    23.28    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.01
sr1              0.07      1.56     0.00   0.00    1.47    21.20    0.00      0.00     0.00   0.00    0.00     0.00    0.00      0.00     0.00   0.00    0.00     0.00    0.00    0.00    0.00   0.02
```

Great tool to understand block devices. \
All block devices of the system are analyzed. 

`r/s, w/s, rkB/s, wkB/s` - Those are the delivered reads / writes to a device. 

`await` - avarage I/O time. Include both time queued and time serviced. 

`avgqu-sz` - average requests number, issued to the device. 

`%util` - The busy percent of the device. Very close to 100% usually means saturation. 

#### free -m

```bash
total        used        free      shared  buff/cache   available
Mem:            1941        1098          97           6         745         667
Swap:           6045          70        5975
```

`buffers` - The buffer cache, used for block device I/O. \
`cached` -The page cache, used by file systems. 

We want to make sure these aren't near-zero in size. 

Note the cached memory can be easily reclaimed, and therefore might be treated as `free`. [free-confusion][free-confusion]

#### sar -n DEV 1

```bash
10:07:16 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil
10:07:17 AM        lo      2.00      2.00      0.11      0.11      0.00      0.00      0.00      0.00
10:07:17 AM     ens33      2.00      2.00      0.12      0.21      0.00      0.00      0.00      0.00
10:07:17 AM     ens37      0.00      2.00      0.00      0.45      0.00      0.00      0.00      0.00
```

Great tool to check network interface throughput, both TX and RX. 

#### sar -n TCP,ETCP 1

```bash
10:08:23 AM  active/s passive/s    iseg/s    oseg/s
10:08:24 AM      0.00      0.00      4.00      4.00

10:08:23 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s
10:08:24 AM      0.00      0.00      0.00      0.00      0.00
```

Summary of few TCP metrics. \
For example, `active/s` includes locally-initiated TCP connections per second (`connect`). \
`passive/s` includes passive accepted TCP connections (`accept`). \
Also the retransmission counter is displayed. 

#### top

Probably the best tool for usermode process analysis. \
Contains many metrics for every process within the system. 

### BCC Tools

Under the `tools/` directory of the sources, we can find many useful already-written tools. 

For example, `offcputime.py` is a very usefull tracing tool. \
It allows watching which thread within the system is blocked (for example, because it is waiting for I/O), and the amount of time it was blocked (`re_scheduled_to_CPU_timestamp - blocked_timestamp`). \
Moreover, it displays the stack trace and the task name. 


[bcc-git]: https://github.com/iovisor/bcc
[link0]: https://www.iovisor.org/technology/bcc
[link1]: https://opensource.com/article/17/11/bccbpf-performance
[link2]: https://www.redhat.com/en/blog/bcc-tools-brings-dynamic-kernel-tracing-red-hat-enterprise-linux-81
[link3]: https://www.containiq.com/post/bcc-tools
[linux-performance]: https://netflixtechblog.com/linux-performance-analysis-in-60-000-milliseconds-accc10403c55
[free-confusion]: https://www.linuxatemyram.com/
